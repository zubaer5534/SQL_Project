create database TOURISM;
use database tourism;
create schema EUROPE;
use schema europe;

create or replace table AIRBNB
(
City varchar (30),
Price number (10,4),
Day varchar (10),
Room_Type varchar (30),
Shared_Room varchar (6),
Private_Room varchar (6),
Person_Capacity number (1,0),
Superhost varchar (6),
Multiple_Rooms number (1,0),
Business number (2,1),
Cleanliness_Rating number (3,1),
Guest_Satisfaction number (3,0),
Bedrooms number (2,0),
City_Center_km number (6,4),
Metro_Distance_km number (6,4),
Attraction_Index number (7,3),
Normalised_Attraction_Index number (5,2),
Restraunt_Index number (6,2),
Normalised_Restraunt_Index  number (5,2)
);

SELECT * FROM AIRBNB limit 5;

--1) The number of Records should be 41,712
--Sol-1:
SELECT count(*) FROM AIRBNB;--TOTAL RECORDS 41,712

--2) Perform Descriptive Analysis and Frequency Distribution
--Sol-2
SELECT * FROM AIRBNB limit 5;
select distinct city from airbnb;

-- descriptive analysis and Frequency Distribution OF city

select city,
round(avg(price),2) as average_city_revenue,
round(MIN(price),2) as MIN_city_revenue,
round(MAX(price),2) as MAX_city_revenue,
round(SUM(price),2) as SUM_city_revenue,
round(STDDEV(price),2) as STD_city_revenue,
COUNT(CITY) AS NUMBER_OF_BOOKING_PER_CITY
from airbnb
GROUP BY CITY;


-- descriptive analysis and Frequency Distribution OF ROOM_TYPE

select ROOM_TYPE,
round(avg(price),2) as average_ROOM_TYPE_PRICE,
round(MIN(price),2) as MIN_ROOM_TYPE_PRICE,
round(MAX(price),2) as MAX_ROOM_TYPE_PRICE,
round(SUM(price),2) as SUM_ROOM_TYPE_PRICE,
round(STDDEV(price),2) as STD_ROOM_TYPE_PRICE,
COUNT(CITY) AS NUMBER_OF_BOOKING_PER_ROOM_TYPE
from airbnb
GROUP BY ROOM_TYPE;

-- descriptive analysis and Frequency Distribution of PRICE
SELECT AVG(PRICE) AS mean_price, 
       PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY PRICE) AS median_price,
       STDDEV(PRICE) AS price_stddev
FROM AIRBNB;

-- descriptive analysis and Frequency Distribution OF SUPERHOST
SELECT SUPERHOST, COUNT(*) AS frequency
FROM AIRBNB
GROUP BY SUPERHOST
ORDER BY frequency DESC;


--3) Check if there is any outlier in the "PRICE" Field; If so, then report the observations and then remove the outliers
--Sol-3
--FIVE NUMBER SUMMARY
SELECT 
round(MIN(PRICE),2) AS MIN_PRICE,
PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY PRICE) AS Q1,
PERCENTILE_CONT(0.50) WITHIN GROUP (ORDER BY PRICE) AS MEDIAN,
PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY PRICE) AS Q3,
round(MAX(PRICE),2) AS MAX_PRICE
FROM AIRBNB; --MAX: 18545.45 & MIN: 34.78

--FINDING OUTLIERS USING FIVE-NUMBER SUMMARY AND INTER-QUARTILE RANGES (IQR)
WITH FIVE_NUMBER_SUMMARY AS
(SELECT 
MIN(PRICE) AS MIN_PRICE,
PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY PRICE) AS Q1,
PERCENTILE_CONT(0.50) WITHIN GROUP (ORDER BY PRICE) AS MEDIAN,
PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY PRICE) AS Q3,
MAX(PRICE) AS MAX_PRICE,
(PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY PRICE)-PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY PRICE)) AS IQR
FROM AIRBNB)

SELECT ROUND((Q1-1.5*IQR),2) AS LOWER_HINGE, round((Q3+1.5*IQR),2) AS UPPER_HINGE
FROM FIVE_NUMBER_SUMMARY AS F
;--UPPER HINGE: 527.41

--REMOVING OUTLIERS
--Patterns in Outliers
CREATE OR REPLACE VIEW OUTLIER AS
(
    WITH FIVE_NUMBER_SUMMARY AS
(SELECT 
MIN(PRICE) AS MIN_ORDER_VALUE,
PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY PRICE) AS Q1,
PERCENTILE_CONT(0.50) WITHIN GROUP (ORDER BY PRICE) AS MEDIAN,
PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY PRICE) AS Q3,
MAX(PRICE) AS MAX_ORDER_VALUE,
(PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY PRICE)-PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY PRICE)) AS IQR
FROM AIRBNB),

HINGES AS
(SELECT (Q1-1.5*IQR) AS LOWER_HINGE, (Q3+1.5*IQR) AS UPPER_HINGE
FROM FIVE_NUMBER_SUMMARY)

SELECT 
    *
FROM AIRBNB
    WHERE PRICE < (SELECT LOWER_HINGE FROM HINGES) OR PRICE > (SELECT UPPER_HINGE FROM HINGES)
    );

SELECT COUNT(*) FROM OUTLIER;    
--REMOVING OUTLIERS TO GET CLEANED DATA
CREATE VIEW CLEANED AS
(
WITH FIVE_NUMBER_SUMMARY AS
(SELECT 
MIN(PRICE) AS MIN_PRICE,
PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY PRICE) AS Q1,
PERCENTILE_CONT(0.50) WITHIN GROUP (ORDER BY PRICE) AS MEDIAN,
PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY PRICE) AS Q3,
MAX(PRICE) AS MAX_PRICE,
(PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY PRICE)-PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY PRICE)) AS IQR
FROM AIRBNB),
HINGES AS
(SELECT (Q1-1.5*IQR) AS LOWER_HINGE, (Q3+1.5*IQR) AS UPPER_HINGE
FROM FIVE_NUMBER_SUMMARY AS F)
SELECT * FROM AIRBNB
WHERE PRICE > (SELECT LOWER_HINGE FROM HINGES) AND PRICE < (SELECT UPPER_HINGE FROM HINGES)

); --OUTLIERS REMOVED AND GOT CLEANED DATA 

--OBSERVING CLEANED DATA
SELECT COUNT(*) FROM CLEANED;
SELECT DISTINCT DAY FROM CLEANED;
SELECT * FROM CLEANED LIMIT 10;

SELECT 
    ROOM_TYPE AS "ROOM TYPE",
    COUNT(*) AS "NO. OF Bookings", 
    ROUND(MIN(PRICE),1) AS "MINIMUM PRICE VALUE",
    ROUND(MAX(PRICE),1) AS "MAXIMUM PRICE VALUE",
    ROUND(AVG(PRICE),1) AS "AVERAGE PRICE VALUE"
FROM CLEANED
GROUP BY ROOM_TYPE;

SELECT 
    CITY,
    ROOM_TYPE AS "ROOM TYPE",
    COUNT(*) AS "NO. OF Bookings", 
    ROUND(MIN(PRICE),1) AS "MINIMUM PRICE VALUE",
    ROUND(MAX(PRICE),1) AS "MAXIMUM PRICE VALUE",
    ROUND(AVG(PRICE),1) AS "AVERAGE PRICE VALUE"
FROM CLEANED
GROUP BY CITY, ROOM_TYPE
ORDER BY CITY, ROOM_TYPE;



--4) Apart from the descriptive analysis, try to Explore which Fields/Variables have a Causal Relationship with "Guest Satisfaction".
--Sol-4
--SHOWING CASUAL RELATIONSHIP WITH “GUEST SATISFACTION” IN DETAILS 

SELECT 
    ROUND(AVG(GUEST_SATISFACTION),1) AS AVERAGE_GUEST_SATISFACTION_SCORE,
    ROUND(MIN(GUEST_SATISFACTION),1) AS MINIMUM_GUEST_SATISFACTION_SCORE,
    ROUND(MAX(GUEST_SATISFACTION),1) AS MAXIMUM_GUEST_SATISFACTION_SCORE
FROM CLEANED;--AVERAGE-93; MIN-20; MAX-100

--GUEST SATISFACTION BY CITY
SELECT 
    CITY,
    ROUND(AVG(GUEST_SATISFACTION),1) AS AVERAGE_GUEST_SATISFACTION_SCORE,
    ROUND(MIN(GUEST_SATISFACTION),1) AS MINIMUM_GUEST_SATISFACTION_SCORE,
    ROUND(MAX(GUEST_SATISFACTION),1) AS MAXIMUM_GUEST_SATISFACTION_SCORE
FROM CLEANED
    GROUP BY CITY
    ORDER BY AVERAGE_GUEST_SATISFACTION_SCORE DESC;

--INSPECTING THE REASON BEHIND THE DIFFERENCE IN AVERAGE GUEST SATISFACTION SCORE
SELECT 
    CITY,
    ROUND(AVG(GUEST_SATISFACTION),1) AS AVERAGE_GUEST_SATISFACTION_SCORE,
    ROUND(AVG(CLEANLINESS_RATING),2) AS AVERAGE_CLEANLINESS_RATING,
    ROUND(AVG(PRICE),0) AS AVERAGE_PRICE,
    ROUND(AVG(NORMALISED_ATTRACTION_INDEX),1) AS AVERAGE_ATTRACTION_INDEX,
    ROUND(MAX(CITY_CENTER_KM),1) AS AVERAGE_DISTANCE_FROM_CITY_CENTER,
    ROUND(MAX(METRO_DISTANCE_KM),1) AS AVERAGE_DISTANCE_FROM_METRO
FROM CLEANED
    GROUP BY CITY
    ORDER BY AVERAGE_GUEST_SATISFACTION_SCORE DESC;
SELECT 
    CITY, ATTRACTION_INDEX, NORMALISED_ATTRACTION_INDEX 
FROM CLEANED
    LIMIT 100;

SELECT 
    ROUND(CORR(GUEST_SATISFACTION, NORMALSED_ATTACTION_INDEX), 2) AS "CORRELATION BET GUEST SATISFACTION AND ATTRACTION INDEX"
FROM CLEANED;--SEE, NOT MUCH ASSOCIATION

SELECT 
    ROUND(CORR(GUEST_SATISFACTION, PRICE), 2) AS "CORRELATION BET GUEST SATISFACTION AND PRICE",
    ROUND(CORR(GUEST_SATISFACTION, CLEANLINESS_RATING), 2) AS "CORRELATION BET GUEST SATISFACTION AND CLEANINGNESS RATING"
FROM CLEANED;--PRICE DOESN'T HAVE ANY ASSOCIATION, BUT CLEANINGNESS RATING DOES HAVE A MODERATE TO STRONG POSITIVE ASSOCIATION

--SHOWING CASUAL RELATIONSHIP WITH “GUEST SATISFACTION” IN BRIEFLY 

with cte1 as
(select 
    corr(guest_satisfaction,price) as PRICE,
    corr(guest_satisfaction,person_capacity) as PERSON_CAPACITY,
    corr(guest_satisfaction,multiple_rooms) as MULTIPLE_ROOMS ,
    corr(guest_satisfaction,business) as BUSINESS,
    corr(guest_satisfaction,cleanliness_rating) as CLEANLINESS_RATING, 
    corr(guest_satisfaction,bedrooms) as BEDROOMS,
    corr(guest_satisfaction,city_center_km) as CITY_CENTER_KM,
    corr(guest_satisfaction,metro_distance_km) as METRO_DISTANCE_KM,
    corr(guest_satisfaction,attraction_index) as ATTRACTION_INDEX,
    corr(guest_satisfaction,normalised_attraction_index) as NORMALISED_ATTRACTION_INDEX,
    corr(guest_satisfaction,restraunt_index) as RESTRAUNT_INDEX,
    corr(guest_satisfaction,normalised_restraunt_index) as NORMALISED_RESTRAUNT_INDEX
from CLEANED)


SELECT *
FROM cte1
   UNPIVOT (value
             FOR Correlation_GUEST_SATISFACTION IN 
             ( PRICE,PERSON_CAPACITY,MULTIPLE_ROOMS,BUSINESS,CLEANLINESS_RATING,BEDROOMS,CITY_CENTER_KM,METRO_DISTANCE_KM,ATTRACTION_INDEX,NORMALISED_ATTRACTION_INDEX,RESTRAUNT_INDEX,NORMALISED_RESTRAUNT_INDEX 
             ) ) AS UNPIVOT_TABLE

GROUP BY Correlation_GUEST_SATISFACTION, value
HAVING VALUE=MAX(VALUE) 
ORDER BY VALUE DESC; -- FROM THIS PERSPECTIVE CLEAN ROOM HAS a Causal Relationship with "Guest Satisfaction" 




